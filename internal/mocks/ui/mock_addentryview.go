// Code generated by MockGen. DO NOT EDIT.
// Source: ./addentryview.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/ui/mock_addentryview.go -source=./addentryview.go
//

// Package mock_ui is a generated GoMock package.
package mock_ui

import (
	keepass "keepassui/internal/keepass"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEntryUpdater is a mock of EntryUpdater interface.
type MockEntryUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockEntryUpdaterMockRecorder
}

// MockEntryUpdaterMockRecorder is the mock recorder for MockEntryUpdater.
type MockEntryUpdaterMockRecorder struct {
	mock *MockEntryUpdater
}

// NewMockEntryUpdater creates a new mock instance.
func NewMockEntryUpdater(ctrl *gomock.Controller) *MockEntryUpdater {
	mock := &MockEntryUpdater{ctrl: ctrl}
	mock.recorder = &MockEntryUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryUpdater) EXPECT() *MockEntryUpdaterMockRecorder {
	return m.recorder
}

// AddEntry mocks base method.
func (m *MockEntryUpdater) AddEntry(templateEntry *keepass.SecretEntry, secretsDB *keepass.SecretsDB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEntry", templateEntry, secretsDB)
}

// AddEntry indicates an expected call of AddEntry.
func (mr *MockEntryUpdaterMockRecorder) AddEntry(templateEntry, secretsDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntry", reflect.TypeOf((*MockEntryUpdater)(nil).AddEntry), templateEntry, secretsDB)
}

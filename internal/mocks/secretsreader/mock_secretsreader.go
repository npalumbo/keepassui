// Code generated by MockGen. DO NOT EDIT.
// Source: ./secretsreader.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/secretsreader/mock_secretsreader.go -source=./secretsreader.go
//

// Package mock_secretsreader is a generated GoMock package.
package mock_secretsreader

import (
	secretsdb "keepassui/internal/secretsdb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSecretReader is a mock of SecretReader interface.
type MockSecretReader struct {
	ctrl     *gomock.Controller
	recorder *MockSecretReaderMockRecorder
}

// MockSecretReaderMockRecorder is the mock recorder for MockSecretReader.
type MockSecretReaderMockRecorder struct {
	mock *MockSecretReader
}

// NewMockSecretReader creates a new mock instance.
func NewMockSecretReader(ctrl *gomock.Controller) *MockSecretReader {
	mock := &MockSecretReader{ctrl: ctrl}
	mock.recorder = &MockSecretReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretReader) EXPECT() *MockSecretReaderMockRecorder {
	return m.recorder
}

// AddSecretEntry mocks base method.
func (m *MockSecretReader) AddSecretEntry(secretEntry secretsdb.SecretEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSecretEntry", secretEntry)
}

// AddSecretEntry indicates an expected call of AddSecretEntry.
func (mr *MockSecretReaderMockRecorder) AddSecretEntry(secretEntry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretEntry", reflect.TypeOf((*MockSecretReader)(nil).AddSecretEntry), secretEntry)
}

// DeleteSecretEntry mocks base method.
func (m *MockSecretReader) DeleteSecretEntry(secretEntry secretsdb.SecretEntry) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretEntry", secretEntry)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteSecretEntry indicates an expected call of DeleteSecretEntry.
func (mr *MockSecretReaderMockRecorder) DeleteSecretEntry(secretEntry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretEntry", reflect.TypeOf((*MockSecretReader)(nil).DeleteSecretEntry), secretEntry)
}

// GetEntriesForPath mocks base method.
func (m *MockSecretReader) GetEntriesForPath(path string) []secretsdb.SecretEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesForPath", path)
	ret0, _ := ret[0].([]secretsdb.SecretEntry)
	return ret0
}

// GetEntriesForPath indicates an expected call of GetEntriesForPath.
func (mr *MockSecretReaderMockRecorder) GetEntriesForPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesForPath", reflect.TypeOf((*MockSecretReader)(nil).GetEntriesForPath), path)
}

// GetFirstPath mocks base method.
func (m *MockSecretReader) GetFirstPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFirstPath indicates an expected call of GetFirstPath.
func (mr *MockSecretReaderMockRecorder) GetFirstPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPath", reflect.TypeOf((*MockSecretReader)(nil).GetFirstPath))
}

// GetUriID mocks base method.
func (m *MockSecretReader) GetUriID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUriID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUriID indicates an expected call of GetUriID.
func (mr *MockSecretReaderMockRecorder) GetUriID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUriID", reflect.TypeOf((*MockSecretReader)(nil).GetUriID))
}

// ReadEntriesFromContentGroupedByPath mocks base method.
func (m *MockSecretReader) ReadEntriesFromContentGroupedByPath() (secretsdb.SecretsDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntriesFromContentGroupedByPath")
	ret0, _ := ret[0].(secretsdb.SecretsDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntriesFromContentGroupedByPath indicates an expected call of ReadEntriesFromContentGroupedByPath.
func (mr *MockSecretReaderMockRecorder) ReadEntriesFromContentGroupedByPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntriesFromContentGroupedByPath", reflect.TypeOf((*MockSecretReader)(nil).ReadEntriesFromContentGroupedByPath))
}

// WriteDBBytes mocks base method.
func (m *MockSecretReader) WriteDBBytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteDBBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteDBBytes indicates an expected call of WriteDBBytes.
func (mr *MockSecretReaderMockRecorder) WriteDBBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDBBytes", reflect.TypeOf((*MockSecretReader)(nil).WriteDBBytes))
}
